{{ if params.question_id }}
	{{ set my_game = {
			player_name: 'test',
			current_question: 0,
			scores: '',
			topic_name: 'TEST',
			room_name: 'TEST',
			difficulty: 'TEST',
			questions: JSON.stringify([params.question_id]),
		}
	}}
{{ else }}
	{{ if params.next }}
		{{ set buf = db.prepare('update player set current_question = current_question + 1 where player_id = ?')
					.run(params.player_id)
		}}
	{{ /if }}

	{{ set my_game = db.prepare(`
			select 
				player_name, 
				current_question, 
				scores, 
				game_mode, 
				topic_name, 
				room_name, 
				difficulty, 
				topic_color,
				questions
			from player natural join game 
			where player_id = ?
		`)
			.get(params.player_id)
	}}
{{ /if }}

{{ set full_question = db.prepare(`
		select title, content, choices, hints, correct_choice, followup
		from question
		where question_id = ?
	`)
		.get(JSON.parse(my_game.questions)[my_game.current_question])
}}
{{ set question_choices = full_question.choices
			.split(/<li[^>]*>([\s\S]*?)<\/li>/)
			.filter( s => !s.startsWith('<') && s.length > 0) 
}}

{{ layout "default.vto" }}
<main hx-target="main" hx-select="main" hx-swap="outerHTML">
	<style>
	{{ if params.question_id }}
		.bg-light-grey {
				background-color: #f6f5f0;
		}

		.bg-light-purple {
				background-color: #E3D7FF;
		}

		.bg-light-yellow {
				background-color: #FFEDB8;
		}

		.bg-lime {
				background-color: #D5F382;
		}

		b {
				font-weight: 600;
		}

		.inter {
				font-family: "Inter", sans-serif;
				font-optical-sizing: auto;
				font-weight: 400;
				font-style: normal;
		}

		.verify-navy,
		.verify-navy:hover,
		.verify-navy:active {
				background-color: #212E5B;
		}

		.verify-red,
		.verify-red:hover,
		.verify-red:active {
				background-color: #D71218;
		}

		.lime-btn,
		.lime-btn:hover,
		.lime-btn:active {
				background-color: #D5F382 !important;
		}

		.purple-btn,
		.purple-btn:hover,
		.purple-btn:active {
				background-color: #A482F3 !important;
		}

		.yellow-btn,
		.yellow-btn:hover,
		.yellow-btn:active {
				background-color: #F8CF56 !important;
		}

		.green-btn,
		.green-btn:hover,
		.green-btn:active {
				background-color: #2FB394 !important;
		}

		.teal-btn,
		.teal-btn:hover,
		.teal-btn:active {
				background-color: #0DB6EC !important;
		}

		.coral-btn,
		.coral-btn:hover,
		.coral-btn:active {
				background-color: #FF8383 !important;
		}

		.blue-btn,
		.blue-btn:hover,
		.blue-btn:active {
				background-color: #1278FF !important;
		}

		.grey-btn,
		.grey-btn:hover,
		.grey-btn:active {
				background-color: #E7E7E7 !important;
		}

		.correct-btn,
		.correct-btn:hover,
		.correct-btn:active {
				background-color: #8BED75 !important;
		}

		.wrong-btn,
		.wrong-btn:hover,
		.wrong-btn:active {
				background-color: #FFAEAE !important;
		}

		.btn-arrow-icon {
				position: absolute;
				right: 16px;
		}

		.align-middle {
				display: flex;
				align-items: center;
		}

		.btn,
		.btn:hover {
				border: 1px solid #000;
				color: black;
		}

		.btn:active {
				transition: filter 0.5s ease-out;
				opacity: 0.8;
		}

		.btn {
				border-radius: 1.5rem;
				text-align: left;
				padding: 1rem 1rem 1rem 1.5rem;
				position: relative;
		}

		.btn-detail {
				padding: 1.5rem;
		}

		@media (max-width: 768px) { 
				.md-align-l {
						text-align: left !important;
				}
				.p-5 {
						padding: 1.5rem !important;
				}
		}

		nav {
				border-bottom: 1px solid #000;
		}

		.navbar {
				padding: 0.2em 0;
		}

		.nav-content {
				padding: 2px 15px;
				display: flex;
				align-items: center;
				justify-content: space-between;
		}

		.lwv-icon {
				height: 48px;
				width: 48px;
				position: relative;
				left: 10px;
		}

		.lwv-img {
				width: 48px;
				padding: 5px 0 0 5px;
				cursor: pointer;
		}

		.me-auto {
				margin-left: auto !important;
				margin-right: 0 !important;
		}

		.navbar-toggler {
				background-color: #A482F3;
				width: 32px;
				height: 32px;
				border-radius: 50%;
				/* border: none; */
		}

		.navbar-toggler-icon {
				width: 19px;
				height: 19px;
				display: block;
				background-image: none;
				margin-left: -6px;
				margin-top: -5px;
		}

		.subnav {
				padding: 0.7rem 0;
				border-bottom: 1px solid #000;
		}

		.margin-auto {
				margin: auto;
		}

		.btn-back {
				position: absolute;
				cursor: pointer;
		}

		.quiz-img img {
				border-radius: 1.5rem;
				max-width: 100%;
				width: auto;
				max-height: 300px;
		}

		.score-container {
				display: flex;
				align-items: center;
		}

		.score-container .count {
				width: 15%;
				margin-bottom: 0;
		}

		.score-container .progress-container {
				width: 85%;
		}

		.progress-container .progress {
				border: 1px solid #000;
		}

		.progress-container .progress-bar {
				background-color: #A482F3;
		}

		.score {
				border-radius: 1.5rem;
				border: 1px solid #000;
				background-color: #D5F382;
				font-weight: 600;
				padding: 0.5rem;
				max-width: 80px;
				min-width: 70px;
				margin: auto;
		}

		/* Style for the question container */
		.question-container {
				background-color: transparent; /* Remove background color */
				border: none; /* Remove border */
				box-shadow: none; /* Remove shadow */
				padding: 0; /* Remove padding */
				margin: 20px auto; /* Center the container and add spacing */
				max-width: 800px; /* Keep maximum width for readability */
			}
			
			/* Style for the question title */
			.question-title {
				font-size: 1.5rem; /* Slightly larger font size */
				font-weight: bold; /* Make the question title bold */
				color: #333333; /* Dark gray color for text */
				margin-bottom: 10px; /* Add space below the title */
			}
			
			/* Style for the question content */
			.question-content {
				font-size: 1.2rem; /* Adjust font size for content */
				color: #555555; /* Medium gray for content text */
				line-height: 1.6; /* Add line spacing for readability */
			}
				{{ /if }}
		dialog {
			pointer-events: none;
			opacity: 0;
			transition: opacity 0.5s;
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
		}
		dialog[open] {
			opacity: 1;
			pointer-events: inherit;
		}
	</style>

	<div>
		<div class="subnav">
			<div class="container-fluid" style="display: flex; align-items: center;">
				<span class="material-symbols-outlined btn-back" onclick="window.history.back()"
						style="cursor: pointer;">arrow_back_ios</span>
				<h4 class="margin-auto">{{ my_game.topic_name }}</h4>
			</div>
		</div>
		<div class="position-relative p-5 text-center">
			<br>
			<div class="score-container my-4 d-flex align-items-center">
				<h6 class="count me-3">
					{{ my_game.current_question + 1 }} of 10
				</h6>
				<div class="progress-container w-75">
					<div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100">
						<div class="progress-bar" style="width: 10%;"></div>
					</div>
				</div>
			</div>
			<div class="score align-middle"><span class="material-symbols-outlined">star</span>0</div>
			<br>
			<div class="question-container text-center">
				<h5 class="question-title" style="color: black; font-weight: bold; font-size: 30px">
					{{ full_question.title }}
				</h5>
				<div class="question-content" style="color: black; font-weight: bold; font-size: 24px;">
					{{ full_question.content }}
				</div>
			</div>
			{{ for idx, choice of question_choices }}
				<button class="btn btn-lg mb-2 align-middle" type="button"
								style="width:100%; background-color: #{{ my_game.topic_color}}"
								onclick="checkIfCorrect(event)"  data-idx="{{ idx + 1 }}">
					<span data-correct hidden class="material-symbols-outlined">check_circle</span>
					<span data-incorrect hidden class="material-symbols-outlined">cancel</span>
					<b class="fs-4">{{ choice }}</b> 
					<span class="material-symbols-outlined  btn-arrow-icon">arrow_forward_ios</span>
				</button>
			{{ /for }}

			<dialog id="followup">
				<div class="position-relative p-5 text-center">
					<div class="question-container text-center">
						<h5 class="question-title">Correct!</h5>
						<div class="question-content">
							{{ full_question.followup }}
						</div>
					</div>
					{{ if my_game.current_question == 9 }}
						<button hx-get="display-score" hx-vals='{"player_id": {{ params.player_id }}}'
									  class="btn btn-lg mb-2 " style="width:80%" type="button">
							<b class="fs-4">View Results</b>
							<span class="material-symbols-outlined btn-arrow-icon">arrow_forward_ios</span>
						</button>
					{{ else if !params.question_id }}
						<button hx-get="display-question" 
										hx-vals='{"player_id": {{ params.player_id }}, "next": true}'
									  class="btn btn-lg mb-2 " style="width:80%" type="button">
							<b class="fs-4">Next Question</b>
							<span class="material-symbols-outlined btn-arrow-icon">arrow_forward_ios</span>
						</button>
					{{ /if }}
				</div>
	
			</dialog>
		</div>
	</div>
	<script>
			//@@@ I made this a var instead of const because it gets redefined by HTMX magic. Should find a better solution.
			{{# var delay = t => new Promise(resolve => setTimeout(resolve, t)) #}}

			
			async function checkIfCorrect(e) {
				const delay = t => new Promise(resolve => setTimeout(resolve, t))
				const target = e.target.nodeName == 'BUTTON' ? e.target : e.target.parentNode
				const choiceNo = target.dataset.idx
				const isCorrect = choiceNo == "{{ full_question.correct_choice }}"
				console.log('checkIfCorrect', target.nodeName, choiceNo, isCorrect)

				target.classList.add('animate__animated', 'animate__pulse')
					await delay(2000)
				target.classList.add(isCorrect ? 'correct-btn' : 'wrong-btn')
				if (isCorrect) {
					target.querySelector('[data-correct]').hidden = false
					await delay(1000)
					document.querySelector('#followup').showModal()
				}
				else {
					target.querySelector('[data-incorrect]').hidden = false
				}
			}
	</script>
</main>
{{ /layout }}